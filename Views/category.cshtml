@using Umbraco.Cms.Web.Common.PublishedModels;
@using umbraco_assignment.Models.PublishedModels
@using umbraco_assignment.Models.ViewModels

@inherits UmbracoViewPage<CategoryPageViewModel>
@inject umbraco_assignment.Business.Services.Interfaces.IReviewService _reviewService
@{
    Layout = "root.cshtml";

    // Hämta bilden från kategorin
    var categoryImage = Model.Content.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("image");

    // Hämta alla restauranger från settingssidan
    var restaurants = Model.SettingsPage.Restaurants.Children<Restaurant>();

    // Definiera kategori (antingen ID eller namn beroende på din struktur)
    var currentCategory = Model.Content.Name; // Till exempel om du vill matcha på kategorinamn

    // Filtrera restauranger efter kategori
    var filteredRestaurants = restaurants.Where(r => r.Category.Contains(currentCategory));

    var restaurantRatings = new List<(Restaurant restaurant, double averageRating)>();

    // Hämta betygen för varje restaurang
    foreach (var restaurant in filteredRestaurants)
    {
        var reviews = _reviewService.GetReviews(restaurant.Id); // Använd restaurant.Id för att hämta recensioner

        double averageRating = reviews.Any() ? reviews.Average(r => r.Rating) : 0;

        // Lägg till restaurangen och dess genomsnittsbetyg i listan
        restaurantRatings.Add((restaurant, averageRating));
    }
}

<div class="container mt-5">
    <div class="row">
        <!-- Vänstra kolumnen med rubrik och stor bild i sidled -->
        <div class="col-lg-6 text-center">
            <div class="large-image-wrapper">
                <h1 class="section-title mb-4">@Model.Content.Name</h1>
                @if (categoryImage != null)
                {
                    <img src="@categoryImage.Url()" alt="@Model.Content.Name" class="img-fluid large-image" />
                }
                else
                {
                    <p>Ingen bild tillgänglig</p>
                }
                <h2 class="category-description">@Model.Content.Description</h2>
            </div>
        </div>

        <!-- Högra kolumnen med dynamiskt genererade filtrerade restaurangkort -->
        <div class="col-lg-6">
            <div class="row">
                @if (filteredRestaurants.Any())
                {
                    @foreach (var restaurant in filteredRestaurants)
                    {
                        var rating = restaurantRatings.FirstOrDefault(r => r.restaurant.Id == restaurant.Id).averageRating;

                        <div class="col-6 mb-4">
                            <a href="@restaurant.Url()" class="card text-center category-card">
                                <img src="@restaurant.FrontImage.Url()" class="card-img-top small-image" alt="@restaurant.RestaurantName">
                                <div class="card-body">
                                    <p>@Html.Raw(restaurant.RestaurantName)</p>
                                    <span class="review-rating-title">
                                        <i class="fas fa-star" style="color: gold"></i>  @rating.ToString("0.0") / 5
                                    </span>

                                </div>
                            </a>
                        </div>
                    }
                }
                else
                {
                    <p>Inga restauranger tillhör denna kategori.</p>
                }
            </div>
        </div>
    </div>
</div>



<style>
    /* För horisontellt arrangemang av rubrik och bild */
    .large-image-wrapper {
        width: 100%;
        max-width: 500px; /* Justera bredden efter behov */
        margin: 0 auto;
    }

    .large-image {
        width: 100%;
        height: 400px;
        object-fit: cover;
        border-radius: 8px;
    }

    .section-title {
        font-size: 4.2rem;
        text-align: left !important;
        /* margin: 23px 0; */
        font-weight: 100;
    }

    .category-description {
        text-align: left;
        margin: 10px 0;
        font-weight: 100;
        line-height: 1.3;
    }

    .mb-4 {
        /* margin-bottom: 4px !important; */
    }

    .row {
        margin-top: 73px !important;
        display: flex;
        flex-wrap: wrap;
        padding-left: calc(var(--bs-gutter-x)* 1);
        padding-right: calc(var(--bs-gutter-x)* 1);
    }

    .col-6 {
        padding-top: 18px;
        display: flex;
        justify-content: center;
    }

    .category-card {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-decoration: none;
        background-color: #f0f0f0;
        border: none;
        width: 100%;
        transition: transform 0.2s;
        padding-top: 0% !important;
    }

        .category-card:hover {
            transform: scale(1.05);
        }

    .small-image {
        max-width: 292px;
        height: 160px;
        object-fit: cover;
    }

    .card-body {
        padding: 0% !important;

    }

        .card-body p {
            font-size: 14px;
            font-weight: bold;
            color: black;
            margin-top: 10px;
        }

</style>

